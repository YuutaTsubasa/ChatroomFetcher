name: Build Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        draft: false
        prerelease: false
        
  build:
    needs: [release]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/github-script@v6
      id: vars
      with:
        script: |
          const os = "${{ matrix.os }}";
          const platform = os.replace('ubuntu', 'linux');
          core.setOutput("platform", platform.replace('-latest', ''));
          const target = platform.replace('macos', 'osx').replace('windows', 'win');
          core.setOutput("target", target.replace('-latest', ''));
          const targetDir = target.replace('osx', 'mac');
          core.setOutput("targetDir", targetDir.replace('-latest', ''));
    - uses: actions/checkout@v3
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: |
        dotnet restore
        dotnet tool install ElectronNET.CLI -g
    - name: Build
      run: electronize build /target ${{ steps.vars.outputs.target }}
    - name: Create archive
      run: zip ChatroomFetcherElectron-${{ steps.vars.outputs.platform }}.zip bin/Desktop/${{ steps.vars.outputs.target }}-unpacked -r
      if: ${{ !startsWith(matrix.os, 'windows') }}
    - name: Create archive
      run: Compress-Archive bin/Desktop/${{ steps.vars.outputs.targetDir }}-unpacked ChatroomFetcherElectron-${{ steps.vars.outputs.platform }}.zip
      if: startsWith(matrix.os, 'windows')
    - name: Upload Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ChatroomFetcherElectron-${{ steps.vars.outputs.platform }}.zip
        asset_name: ChatroomFetcherElectron-${{ steps.vars.outputs.platform }}.zip
        asset_content_type: application/zip
